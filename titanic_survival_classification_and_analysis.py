# -*- coding: utf-8 -*-
"""Titanic_Survival_Classification_and_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-h5IY8-l4zZbmXDR9uAKN-74Uj__W4tL
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import (
    accuracy_score, roc_auc_score, classification_report,
    confusion_matrix, RocCurveDisplay
)

df = pd.read_csv("/content/Titanic-Dataset.csv")
print("Shape:", df.shape)
print("Columns:", df.columns.tolist())
print("\nMissing values:\n", df.isnull().sum())
print("\nSummary statistics:\n", df.describe(include="all").transpose())
print(df.head())

# Survival count
plt.figure(figsize=(6,4))
sns.countplot(x="Survived", data=df, palette="Set2")
plt.title("Survival Count (0 = Died, 1 = Survived)")
plt.show()

# Gender vs Survival
plt.figure(figsize=(6,4))
sns.countplot(x="Sex", hue="Survived", data=df, palette="Set1")
plt.title("Survival by Gender")
plt.show()

# Pclass vs Survival
plt.figure(figsize=(6,4))
sns.countplot(x="Pclass", hue="Survived", data=df, palette="Set3")
plt.title("Survival by Ticket Class")
plt.show()

# Age distribution
plt.figure(figsize=(8,5))
sns.histplot(data=df, x="Age", hue="Survived", bins=30, kde=True, element="step")
plt.title("Age Distribution by Survival")
plt.show()

# Fare distribution
plt.figure(figsize=(8,5))
sns.boxplot(x="Survived", y="Fare", data=df, palette="muted")
plt.title("Fare Distribution by Survival")
plt.show()

# Correlation heatmap
plt.figure(figsize=(8,6))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap="coolwarm", center=0)
plt.title("Correlation Heatmap")
plt.show()

# Survival rate by categorical features
cat_features = ["Sex", "Pclass", "Embarked"] if "Embarked" in df.columns else ["Sex", "Pclass"]
for col in cat_features:
    survival_rate = df.groupby(col)["Survived"].mean()
    print(f"\nSurvival rate by {col}:\n", survival_rate)

# Pairplot (optional)
sns.pairplot(df[["Survived", "Age", "Fare", "Pclass"]], hue="Survived", diag_kind="kde")
plt.show()

# === 3) Preprocessing & Train-Test Split ===
features = ["Age", "Sex", "Pclass", "Fare"]
target = "Survived"
X = df[features]
y = df[target]

numeric_features = ["Age", "Pclass", "Fare"]
categorical_features = ["Sex"]

numeric_transformer = Pipeline(steps=[
    ("imputer", SimpleImputer(strategy="median")),
    ("scaler", StandardScaler())
])

categorical_transformer = Pipeline(steps=[
    ("imputer", SimpleImputer(strategy="most_frequent")),
    ("onehot", OneHotEncoder(handle_unknown="ignore"))
])

preprocessor = ColumnTransformer(
    transformers=[
        ("num", numeric_transformer, numeric_features),
        ("cat", categorical_transformer, categorical_features),
    ]
)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# === 4) Model Training & Evaluation ===
models = {
    "Logistic Regression": LogisticRegression(max_iter=200),
    "Random Forest": RandomForestClassifier(n_estimators=300, random_state=42)
}

for name, model in models.items():
    clf = Pipeline(steps=[("preprocessor", preprocessor),
                          ("classifier", model)])
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    y_proba = clf.predict_proba(X_test)[:, 1]

    print(f"\n===== {name} =====")
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("ROC-AUC :", roc_auc_score(y_test, y_proba))
    print("Classification Report:\n", classification_report(y_test, y_pred))
    print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

    RocCurveDisplay.from_predictions(y_test, y_proba)
    plt.title(f"ROC Curve - {name}")
    plt.show()

# === 5) Survivors Listing ===
survivors = df[df["Survived"] == 1]
print("\nTotal survivors:", survivors.shape[0])
print("\nFirst 10 survivors:\n", survivors.head(10))